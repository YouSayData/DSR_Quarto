---
title: "CodeChunks and more"
author: "Thomas Koentges"
date: 03/22/2024
format: html
execute:
  echo: true
  collapse: true
params:
  x_axis: "price"
  y_axis: "carat"
---

```{r}
#| label: setup
#| include: false

library(tidyverse)
comma <- function(x) format(x, digits = 2, big.mark = ",")

smaller <- diamonds |> 
  filter(carat <= 2.5)
```

## Code Chunks

You can insert new code chunks in 3 ways:

1. *CTRL/CMD + Alt/Option + I*
2. Click +C
3. Type opening and closing ```

## How a code chunk looks

````r
```{r}`r ''`
#| label: chunk_name
#| echo: false
library(dplyr)
mtcars |> 
  group_by(cyl) |> 
  summarize(n = n(), mean = mean(mpg))
```
````

```{r}
#| label: chunk_name2
#| echo: false
#| eval: false
# this would be a code chunk! But the code is neither printed (echo = F) nor executed (eval = F)
library(dplyr)
mtcars |>  
  group_by(cyl) |>  
  summarize(n = n(), mean = mean(mpg))
```

### How it works

```{r}
mtcars |>  
  group_by(cyl) |>  
  summarize(n = n(), mean = mean(mpg))
```


### Important chunk options

- `eval: false`
- `include: false`
- `echo: false`
- `message: false` or `warning: false`
- `results: 'hide'` and `fig.show: 'hide'`
- `error: true` 
- `cache: true`

## Cache example

```{r}
#| label: iris_data
#| cache: true
my_data <- iris # |> 
#  filter(Species != "virginica")
```

```{r}
#| label: iris_plot
#| cache: true
my_plot <- my_data %>%
  ggplot(aes(Sepal.Width, col = Species)) +
  geom_boxplot()
```

```{r}
#| label: iris_vis
my_plot
```

## Inline R

You can write R code inline to calculate variables. For instance: We have data about `r nrow(diamonds)` diamonds. Only `r nrow(diamonds) - nrow(smaller)` are larger than 2.5 carats. 

## Exercises

1. Make the numbers above nicer using the `comma()` function.

2. Add a section that explores how diamond sizes vary by cut, colour, and clarity. Assume you’re writing a report for someone who doesn’t know R, and instead of setting `echo: false` on each chunk, set a global option.

3. Download diamond-sizes.qmd from https://github.com/hadley/r4ds/blob/main/quarto/. Add a section that describes the largest 20 diamonds, including a table that displays their most important attributes.

4. Set up a network of chunks where d depends on c and b, and both b and c depend on a. Have each chunk `print lubridate::now()`, set `cache: true`, then verify your understanding of caching.

## Other interesting things

:::: {.columns}
::: {.column width="40%"}

#### Info in 2-columns

On the right side is a very informative figure!

:::
::: {.column width="60%"}

```{r}
#| label: diamond-plot
#| fig-cap: "Something useful about diamonds"
#| fig-width: 4
#| fig-height: 3
#| echo: false
ggplot(diamonds, aes(.data[[params$x_axis]], .data[[params$y_axis]])) + geom_point()
```


:::
::::
